import logging
import gspread
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from google.oauth2.service_account import Credentials

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Constants
CATEGORIES = [
    "–ö–∞—Ä–∫–∞—Å –∑–¥–∞–Ω–∏—è", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–∞", "–ö–∏—Ä–ø–∏—á–Ω–∞—è –∫–ª–∞–¥–∫–∞", "–ú–æ–Ω—Ç–∞–∂ –ª–∏—Ñ—Ç–∞", "–û—Ç–¥–µ–ª–∫–∞",
    "–û–í –í–ö", "–ú–æ–Ω—Ç–∞–∂ –æ–∫–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤", "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–ö—Ä–æ–≤–ª—è",
    "–§–∞—Å–∞–¥", "–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "–°–∏—Å—Ç–µ–º–∞ —Å–≤—è–∑–∏",
    "–û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–∫—Ä–∞–Ω–∞", "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ç—É—à–æ–∫", "–û–ø–µ—Ä–∞—Ç–æ—Ä —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞/–ø–æ–≥—Ä—É–∑—á–∏–∫–∞",
    "–ü–µ—Ç—É—à–æ–∫", "–ê–≤—Ç–æ–∫—Ä–∞–Ω", "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä", "–°–∞–º–æ—Å–≤–∞–ª"
]
MAX_VALUES = {
    "–ö–∞—Ä–∫–∞—Å –∑–¥–∞–Ω–∏—è": 3, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–∞": 2, "–ö–∏—Ä–ø–∏—á–Ω–∞—è –∫–ª–∞–¥–∫–∞": 10, "–ú–æ–Ω—Ç–∞–∂ –ª–∏—Ñ—Ç–∞": 4,
    "–û—Ç–¥–µ–ª–∫–∞": 8, "–û–í –í–ö": 7, "–ú–æ–Ω—Ç–∞–∂ –æ–∫–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤": 2, "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏": 7,
    "–ö—Ä–æ–≤–ª—è": 6, "–§–∞—Å–∞–¥": 6, "–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": 4, "–°–∏—Å—Ç–µ–º–∞ —Å–≤—è–∑–∏": 6,
    "–û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–∫—Ä–∞–Ω–∞": 2, "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ç—É—à–æ–∫": 1, "–û–ø–µ—Ä–∞—Ç–æ—Ä —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞/–ø–æ–≥—Ä—É–∑—á–∏–∫–∞": 2,
    "–ü–µ—Ç—É—à–æ–∫": 1, "–ê–≤—Ç–æ–∫—Ä–∞–Ω": 3, "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä": 1, "–°–∞–º–æ—Å–≤–∞–ª": 1
}
STATE_INDEX = 0

# Connect to Google Sheets
SHEET_ID = '1C_1Oj04hYwX0pRrbycfc6DfyovEJmhKPQLVEuiPUmv4'  # Replace this!
RANGE_NAME = 'Sheet1'  # or change if needed
SCOPE = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPE)
gc = gspread.authorize(creds)
worksheet = gc.open_by_key(SHEET_ID).worksheet(RANGE_NAME)

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['index'] = 0
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è: {CATEGORIES[0]} (–º–∞–∫—Å. {MAX_VALUES[CATEGORIES[0]]})")
    return STATE_INDEX

# Handle category inputs
async def collect_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get('index', 0)
    try:
        val = int(update.message.text)
        max_val = MAX_VALUES[CATEGORIES[index]]
        if 0 <= val <= max_val:
            context.user_data[CATEGORIES[index]] = val
        else:
            await update.message.reply_text(f"‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {max_val} –¥–ª—è {CATEGORIES[index]}.")
            return STATE_INDEX
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return STATE_INDEX

    index += 1
    if index < len(CATEGORIES):
        context.user_data['index'] = index
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è: {CATEGORIES[index]} (–º–∞–∫—Å. {MAX_VALUES[CATEGORIES[index]]})")
        return STATE_INDEX
    else:
        # Prepare data
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        row = [now] + [context.user_data.get(cat, 0) for cat in CATEGORIES]
        worksheet.append_row(row)
        summary = "üìã –û—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—á–∏–º:\n" + "\n".join([f"{cat}: {context.user_data.get(cat, 0)}" for cat in CATEGORIES])
        await update.message.reply_text(summary + "\n‚úÖ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets.")
        return ConversationHandler.END

# Cancel command
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# Bot token and application run
if __name__ == '__main__':
    application = ApplicationBuilder().token("7531600122:AAEXTeFsMXb8pkjbGLfj5YNghgRgD5VHGkI").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={STATE_INDEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_input)]},
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()
